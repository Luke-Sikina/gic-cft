Description: S3 Bucket for GIC Data Access

Parameters:
  InstitutionName:
    Type: String
    Description: The short name of your institution. bhc, chop (lowercase!)
    Default: prototype
  ServiceWorkbenchAccount:
    Type: String
    Description: The AWS account ID of your service workbench account
    Default: 555035503484
Resources:
#-------------------------------------------------------------------------------
#                               Users & Access Keys
#-------------------------------------------------------------------------------
  DataUploadUser:
  # make dep on policy
    Type: AWS::IAM::User
    Properties:
      Path: "/data-upload-user/"
      
  DataUploadUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref DataUploadUser
    
  DataUploadUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join ['-', [!Ref InstitutionName, data-upload-user-secret]]
      Description: Access Key secret for Data Upload User
      SecretString: !GetAtt DataUploadUserAccessKey.SecretAccessKey
#-------------------------------------------------------------------------------
#                                Roles & Policies
#-------------------------------------------------------------------------------
  PicSureDataUploadPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref DataUploader
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject*
              - s3:DeleteObject*
            Resource:
              - 'arn:aws:s3:::pic-sure-data-sharing-bucketprototype/*' 
            # Condition:
            #   StringEquals:
            #     sts:ExternalId: !Ref ExternalId
    
  # Uploaders need PUT access to the S3 bucket, but nothing else
  # Each institution has a single uploader, tied to their PIC-SURE node
  DataUploader:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PicSureDataUploadRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS:
              - !Ref ServiceWorkbenchAccount
              - 'arn:aws:iam::302142166944:user/data-upload-user/frank-DataUploadUser-WKWGL8C9VUBK'
              - !Sub 'arn:aws:iam::${ServiceWorkbenchAccount}:user/data-upload-user/${DataUploadUser}'
            Action:
              - 'sts:AssumeRole'
      Policies: []

  # The site owner runs a Service Workbench instance that needs
  # Fairly universal access to the S3 bucket
  SWBClient:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SWBDataConsumerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: !Ref ServiceWorkbenchAccount
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: PicSureDataUploadPolicy 
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource:
                  - !Join ['', ['arn:aws:s3:::pic-sure-data-sharing-bucket', !Ref InstitutionName, '/*']]
                  - !Join ['', ['arn:aws:s3:::pic-sure-data-sharing-bucket', !Ref InstitutionName]]
                Action:
                  - s3:*

#-------------------------------------------------------------------------------
#                                Buckets & Policies
#-------------------------------------------------------------------------------
  # We need a bucket for uploading study data to
  StudyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', ['pic-sure-data-sharing-bucket', !Ref InstitutionName]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  # In addition to roles, buckets have policies? Idk why authorization is 
  # fractured like this, but here's a policy
  StudyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - DataUploader
      - SWBClient
    Properties:
      Bucket: !Join ['', ['pic-sure-data-sharing-bucket', !Ref InstitutionName]]
      PolicyDocument:
        Statement:
          # TODO: Once I have kms key, restrict here
          - Sid: Deny requests that do not use TLS/HTTPS
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              - !Join ['', ['arn:aws:s3:::pic-sure-data-sharing-bucket', !Ref InstitutionName, '/*']]
              - !Join ['', ['arn:aws:s3:::pic-sure-data-sharing-bucket', !Ref InstitutionName]]
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: Allow PIC-SURE clients with uploader role
            Effect: Allow
            Principal:
              AWS: 
              - !Sub 'arn:aws:iam::${ServiceWorkbenchAccount}:role/PicSureDataUploadRole'
              - arn:aws:iam::302142166944:role/PicSureDataUploadRole
            Action:
              - s3:PutObject*
              - s3:DeleteObject*
            Resource:
              - !Join ['', ['arn:aws:s3:::pic-sure-data-sharing-bucket', !Ref InstitutionName, '/*']]
              - !Join ['', ['arn:aws:s3:::pic-sure-data-sharing-bucket', !Ref InstitutionName]]
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: Allow SWB clients with everything role
            Effect: Allow
            Principal:
              AWS: 
              - !Sub arn:aws:iam::${ServiceWorkbenchAccount}:role/SWBDataConsumerRole
            Action: s3:* #TODO: narrow permissions
            Resource:
              - !Join ['', ['arn:aws:s3:::pic-sure-data-sharing-bucket', !Ref InstitutionName, '/*']]
              - !Join ['', ['arn:aws:s3:::pic-sure-data-sharing-bucket', !Ref InstitutionName]]
            Condition:
              Bool:
                aws:SecureTransport: false
